//1249. 刪除最少字使括號有效

/*
 *題目簡介
 *
 *給定一個字符串 s，內容為小寫英文與括號
 *請刪除最小數量的括號，返回括號皆有效的字符串
 *
 */

/*************************************************************
方法 O(n) & O(1)

算法

取一個cnt變量

從頭開始迭代字符串

當你找到一個左括號'('時增加cnt
當您找到一個右括號')'時檢查cnt
    如果cnt為 0，這意味著之前沒有可用的左括號
    因此用'#'替換字符串索引，#意旨需移除括號
    否則cnt減 1，因為找到了有效的對

現在從後面迭代字符串並重複相同的步驟，但這次檢查右括號

如果出現右括號')'時增加cnt
如果出現左括號'('時檢查cnt
    如果cnt為 0，這意味著之前沒有可用的左括號
    因此用'#'替換字符串索引，#意旨需移除括號
    否則cnt減 1，因為找到了有效的對

現在移除多餘的括號'#'

每 3 步的時間複雜度為 O(n + n + n) = O(n)

***************************************************************
算法優化

現在從後面迭代字符串並重複相同的步驟，但這次檢查右括號

如果出現右括號')'時增加cnt
如果出現左括號'('時檢查cnt
    如果cnt為 0，這意味著之前沒有可用的左括號
    因此用'#'替換字符串索引，#意旨需移除括號
    否則cnt減 1，因為找到了有效的對

改成下方算法

現在從後面迭代字符串，檢查左括號及cnt大於0
    如果出現左括號'('時
    將其替換成'#'及cnt 減 1

原因是只要把最後面多餘的'('刪除即可
這麼做效率可以稍微提升

*************************************************************/

class Solution
{
public:
    string minRemoveToMakeValid(string s)
    {
        int cnt = 0;

        for (auto& c : s) {
            if (c == '(') {
                ++cnt;
            }
            else if (c == ')' && cnt > 0) {
                --cnt;
            }
            else if (c == ')') {
                c = '#';
            }
        }

        for (int i = s.size() - 1; i >= 0 && cnt > 0; --i) {
            if (s[i] == '(') {
                s[i] = '#';
                --cnt;
            }
        }

        s.erase(remove(s.begin(), s.end(), '#'), s.end());
        return s;
    }
};